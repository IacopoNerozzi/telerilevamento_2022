
### USO DEL SUOLO NELLA PIANA PISTOIA-PRATO-FIRENZE ###

#caricamento di librerie necessarie ai codici successivi
library(raster)
#permette l'utilizzo dei raster e funzioni annesse
library(RStoolbox)
#permette l'uso della Unsupervised Classification
library(ggplot2)
#permette il plottaggio in ggRGB
library(patchwork)
#permette la crwazione di multiframe in ggplot
library(viridis)
#permette l'utilizzo della scala di colori viridis
library(gridExtra)
#permette la creazione di grafici e simili
setwd("C:/lab/esame/bande/")
#settaggio come nostro solito della working directory



### PRIMA PARTE, Importazione dei dati, ricampionamento e una prima visualizzazione ###

#IMMAGINE DEL 2013
list_2013 <- list.files(pattern="2013_B")
# list.files crea una lista di oggetti secondo un pattern specificato comune
import_2013 <- lapply(list_2013, raster)
#assegno alla lista creata la funzione raster, con la funzione lapply
toscana_2013 <- stack(import_2013)
#creo un blocco di dati con la funzione stack, impilo le bande scaricate singolarmente
toscana_2013
#controllo info sull'oggetto
plot(toscana_2013)
#plot delle singole bande in serie

# Disposizione delle bande, info presa da https://www.usgs.gov/faqs/what-are-band-designations-landsat-satellites
# B2: Blu
# B3: Verde
# B4: Rosso
# B5: NIR

plotRGB(toscana_2013, r=4, g=3, b=2, stretch="Lin")
#plot dell'immagine 2013 a colori naturali
#associo le 3 componenti RGB alla banda giusta

#IMMAGINE DEL 2019
#svolgo lo stesso processo usato per le img 2013
list_2019 <- list.files(pattern="2019_B")  
import_2019 <- lapply(list_2019, raster)
toscana_2019 <- stack(import_2019)
toscana_2019
#è importante controllare che le immagini abbiano la stessa risoluzione e dimensione
#è più grande di quella del 2013, dovrò ricampionarla per averle di ugual dimensione
plot(toscana_2019)
plotRGB(toscana_2019, r=4, g=3, b=2, stretch="Lin")

#LE DUE IMMAGINI A CONFRONTO
#con la funzione par posso visualizzare insieme le due immagini per un primo confronto visivo
par(mfrow=c(1,2)) 
#due righe e una colonna, avrò immagini una sopra l'altra
plotRGB(toscana_2013, r=4, g=3, b=2, stretch="Lin")  + title(main = "Toscana 2013")
plotRGB(toscana_2019, r=4, g=3, b=2, stretch="Lin")  + title(main = "Toscana 2019")
dev.off()
#la visualizzazione "doppia" di par rimarrebbe di default 
#dev.off azzera i plot e le impostazioni grafiche



### SECONDA PARTE, visualizzazione in NIR ###

gg2013 <- ggRGB(toscana_2013, r=5, g=4, b=3, stretch="Lin")
#scelgo di usare ggRGB per il plot, una funzione che mi permettere di associare poi il plot ad un oggetto
#spesso non è necessario specificare lo stretch lineare usando ggRGB
#plot associando alla prima componente Red la banda NIR (Near InfraRed), la numero 5
#la vegetazione riflette il NIR con colore visualizzato Rosso

gg2019 <- ggRGB(toscana_2019, r=5, g=4, b=3, stretch="Lin")
#faccio la stessa cosa con l'immagine del 2019

gg2013 + gg2019
#grazie alla libreria "patchwork" posso visualizzare due plot assegnati ad oggetti
#è un altro modo per fare un confronto visivo
dev.off()

#nota negativa...ggRGB lavora molto lentamente sul mio dispositivo



### TERZA PARTE, crop dell'immagine sull'area d'interesse ###

#La mia immagine raffigura la Toscana, ma il mio lavoro vuole indagare solo l'area di Pistoia-Prato-Firenze
#l'idea è quella di ritagliare, dall'immagine di partenza, la mia area di interesse

#CROP DELL'IMMAGINE 2013
extent(toscana_2013)
#visualizzo l'estensione della mia immagine, con i valori limite
ggRGB(toscana_2013, r=5, g=4, b=3, stretch="Lin")
#plot ggRGB per avere l'estensione dell'immagine originale anche su plot
#in questo modo le inserisco meglio
ext <- c(648000, 685000, 4840000, 4870000) # qui metto le coordinate, le estensioni limite del mio ritaglio
#creo un vettore di posizione che inserirò nella funzione crop, farà da coordinate di ritaglio
piana2013 <- crop(toscana_2013, ext)
piana2013
#nuova immagine croppata
plot(piana2013)
#plot delle bande
plotRGB(piana2013, r=4, g=3, b=2, stretch="Lin")
#plot del crop, stavolta con plotRGB, in colori naturali

#CROP DELL'IMMAGINE 2019
extent(toscana_2019)
#dopo il ricampionamento i valori sono gli stessi dell'immagine 2013
#non ho bisogno di ricalcolare le coordinate, uso ext 2013
piana2019 <- crop(toscana_2019, ext)
piana2019
plot(piana2019)
plotRGB(piana2019, r=4, g=3, b=2, stretch="Lin")

#CONVERSIONE IMMAGINI IN 8bit

#IMMAGINE 2013
piana13bit8 <- calc(piana2013, fun=function(x){((x - min(x)) * 255)/(max(x)- min(x)) + 0})
piana13bit8

#IMMAGINE 2019
piana19bit8 <- calc(piana2019, fun=function(x){((x - min(x)) * 255)/(max(x)- min(x)) + 0})
piana19bit8


#PLOT AREA d'INTERESSE in NIR
par(mfrow=c(1,2))
plotRGB(piana13bit8, r=5, g=4, b=3, stretch="Lin") + title(main = "NIR 2013")
plotRGB(piana19bit8, r=5, g=4, b=3, stretch="Lin") + title(main = "NIR 2019")
#confronto le nuove immagini con visualizzazione in NIR
dev.off()



### QUARTA PARTE, calcoleremo il DVI nel 2013, poi nel 2019, infine vederemo la differenza negli anni ###

#DVI 2013
dvi2013 <- piana13bit8[[5]] - piana13bit8[[4]]
dvi2013
#5 e 4 sono indicativi delle bande, NIR - RED
#ho uno o più valori negativi molto bassi che mi fanno sballare la scala di colore

#DVI 2019
dvi2019 <- piana19bit8[[5]] - piana19bit8[[4]]
dvi2019
#calcolo la stessa cosa per il 2019

#creo una palette per la visualizzazione delle aree
#uso una palette creata a lezione
cl <- colorRampPalette(c("darkblue", "blue", "yellow", "red","black")) (100)
#il giallo cattura l'attenzione dell'occhio, buon colore da usare per evidenziare criticità
#si associa quindi alle zone interessate da cementificazione

#visualizzazione in multiframe con par per confronto visivo
par(mfrow=c(1,2))
plot(dvi2013, col=cl) + title(main = "DVI 2013")
plot(dvi2019, col=cl) + title(main = "DVI 2019")
dev.off()
#dovrei apprezzare quindi la variazione di aree rosse (vegetazione) fra 2013 e 2019
#dovrei vedere l'aumento delle aree gialle (deforestate) fra 2013 e 2019

#Calcolo della differenza di DVI fra 2013 e 2019
dvi_dif <- dvi2013 - dvi2019
dvi_dif
#riprendo una palette utilizzata a lezione per visualizzare la variazione a schermo
cld <- colorRampPalette(c("blue", "white", "red")) (100)

#plot in multiframe della variazione DVI negli anni
plot(dvi_dif, col=cld)
#nelle aree con più alta variazione ho colore rosso

# NDVI, utile per fare confronti

ndvi2013 <- dvi2013 / (piana13bit8[[5]] + piana13bit8[[4]])
ndvi2013

ndvi2019 <- dvi2019 / (piana19bit8[[5]] + piana19bit8[[4]])
ndvi2019

#PLOT dei due NDVI
par(mfrow=c(1,2))
plot(ndvi2013, col=cl) + title(main = "NDVI 2013")
plot(ndvi2019, col=cl) + title(main = "NDVI 2019")
dev.off()
#simile al plot del dvi
#non apprezzabilissima la differenza da queste immagini



### QUINTA PARTE, classificazione delle immagini ###

#voglio quantificare su mappa quanto è cambiato
#categorizzo quindi in 3 classi la mappa con la funzione unsuperClass
#unsuperclass non mantiene sempre la stessa corrispondenza colore-categorizzazione, la associa randomicamente ad ogni rilancio dello script
set.seed(25)
#prima di ciò ho lanciato set.seed() che mi permette di avere la stessa classificazione per tutte le immagini
class13 <- unsuperClass(piana13bit8, nClasses=3)
class19 <- unsuperClass(piana19bit8, nClasses=3)
#ottengo 2 rasterlayer classificati in 3 livelli

#visualizzo a schermo le mappe 2000 e 2020 per un primo confronto visivo
par(mfrow=c(1,2))
plot(class13$map) + title(main = "UnsuperClass 2013")
plot(class19$map) + title(main = "UnsuperClass 2019")
dev.off()
#non riesce a discriminare l'acqua dalla vegetazione, una debolezza della classificazione, va a perdersi informazione



### SESTA PARTE, quantificazione della variazione del suolo attraverso le frequenze dei pixel categorizzati ###

#calcolo ora la frequenza delle 3 diverse categorie di pixel
#una debolezza di questo sistema è l'errore di calcolo che si ottiene ogni volta che si rilancia il codice
freq(class13$map)
# B1 (bianco) (edifici) = 247047
# B2 (giallo) (suolo antr.) = 350719
# B3 (verde) (bosco + acqua) = 635210
# NA = 24 ---------> pixel che non riesce a categorizzare
freq(class19$map)
# B1 (bianco) (edifici) = 247825
# B2 (giallo) (suolo antr.) = 404037
# B3 (verde) (bosco + acqua) = 581138 
#al rilancio del codice una piccola porzione di pixel cambia categoria non permettendo di avere sempre valori fissi in categorizzazione
#non inficia significativamente sulla frequenza relativa (o percentuale)

#calcolo delle percentuali, il numero di pixel per banda, sull'area tot
area_tot <- (247825 + 404037 +581138) 
area_tot
#1233000

prop1 <- freq(class13$map) / area_tot
prop1
# B1 (bianco) (edifici) = 20.0 %
# B2 (verde) (suolo antr.) = 28.4 %
# B3 (giallo) (bosco + acqua) = 51.5 %
# NA = 0.000...       = non influente sulle percentuali 

prop2 <- freq(class19$map) / area_tot
prop2
# B1 (bianco) (edifici) = 20.1 %
# B2 (giallo) (suolo antr.) = 32.8 %
# B3 (verde) (bosco + acqua) = 47.1 %

#Cosa noto dalle frequenzeassolute e dalle percentuali (f. relative)?
#gli edifici e il suolo antropizzato aumentano
#La copertura boschiva diminuisce



### SETTIMA PARTE, Creazione di una tabella contente i dati appena estratti e graficazione con Barplot ###

#voglio inserire in tabella i dati appena elaborati
Bosco <- c(51.5, 47.1)
Suolo_Antr <- c(28.4, 32.8)
Edifici <- c(20.0, 20.1)
Anni <- c("2013", "2019")
#creo dei vettori che contengano i miei valori
#anche se sono numeri, li metto fra virgolette
#cosi facendo sono un dato character e posso inserire %

piana.frame <- data.frame(Bosco, Suolo_Antr, Edifici)
#ho creato il data frame
rownames(piana.frame) <- Anni
piana.frame
  

#salvo la tabella come immagine
png("dataframe.png", height=300, width=300)
p<-tableGrob(piana.frame)
grid.arrange(p)
dev.off()


#Per una visualizzazione migliore dei risultati creo un Barplot
barplot(t(as.matrix(piana.frame)),
        main = "% Uso del suolo negli anni",
        xlab = "Anni", ylab = "Uso del suolo %",
        col = c("darkgreen", "yellow", "white"),
        legend.text = c("Bosco", "Suolo Antropizzato", "Edifici"),
        xlim = c(0,10),
        beside = TRUE)



### OTTAVA PARTE, Analisi della variabilità sul NIR ###

#VAR su 2013
nir13 <- piana13bit8[[5]]
#associo la banda del NIR ad un oggetto
nir13
#NIR è la banda più informativa all'interno del lavoro svolto
sd13 <- focal(nir13, matrix(1/9, 3, 3), fun=sd)
#il primo argomento è l'oggetto del calcolo di variabilità
#poi dobbiamo definire la matrice
#l'unità della matrice (un nono)
#poi le righe e le colonne
#bisogna poi definire la funzione
#scelgo la Standard Deviation (intervallo in cui ricadono il 68% dei valori)
sd13
#la deviazione standard è una funzione di misura della variabilià
#misura la variazione intorno alla media

#plottiamola con viridis
ggplot() + 
  geom_raster(sd13, mapping=aes(x=x, y=y, fill=layer)) +
  scale_fill_viridis() +
  ggtitle("Standard deviation by viridis in 2013")


#VAR su 2019
nir19 <- piana19bit8[[5]]
nir19
sd19 <- focal(nir19, matrix(1/9, 3, 3), fun=sd)
sd19

ggplot() + 
  geom_raster(sd19, mapping=aes(x=x, y=y, fill=layer)) +
  scale_fill_viridis() +
  ggtitle("Standard deviation by viridis in 2019")

#vAR 2019 in una matrice 7x7
sd7 <- focal(nir19, matrix(1/49, 7, 7), fun=sd)
sd7

ggplot() + 
  geom_raster(sd7, mapping=aes(x=x, y=y, fill=layer)) +
  scale_fill_viridis() +
  ggtitle("Standard deviation by viridis")

